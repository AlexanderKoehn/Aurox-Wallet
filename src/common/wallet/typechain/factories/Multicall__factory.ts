/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregateView",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610859806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806386d516e811610076578063a8b0574e1161005b578063a8b0574e14610118578063bce38bd714610126578063ee82ac5e1461013957600080fd5b806386d516e8146100f15780639cafa385146100f757600080fd5b80630f28c97d146100a857806342cbb15c146100bd5780634d2301cc146100c357806372425d9d146100eb575b600080fd5b425b6040519081526020015b60405180910390f35b436100aa565b6100aa6100d13660046104f1565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100aa565b456100aa565b61010a610105366004610583565b61014b565b6040516100b492919061071b565b6040514181526020016100b4565b61010a610134366004610583565b61030f565b6100aa6101473660046107b1565b4090565b8051439060609067ffffffffffffffff81111561016a5761016a610513565b6040519080825280602002602001820160405280156101b057816020015b6040805180820190915260008152606060208201528152602001906001900390816101885790505b50905060005b8351811015610307576000808583815181106101d4576101d46107ca565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16868481518110610208576102086107ca565b60200260200101516020015160405161022191906107e0565b600060405180830381855afa9150503d806000811461025c576040519150601f19603f3d011682016040523d82523d6000602084013e610261565b606091505b509150915086156102be57816102be5760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b60405180604001604052808315158152602001828152508484815181106102e7576102e76107ca565b6020026020010181905250505080806102ff906107fc565b9150506101b6565b509250929050565b8051439060609067ffffffffffffffff81111561032e5761032e610513565b60405190808252806020026020018201604052801561037457816020015b60408051808201909152600081526060602082015281526020019060019003908161034c5790505b50905060005b835181101561030757600080858381518110610398576103986107ca565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106103cc576103cc6107ca565b6020026020010151602001516040516103e591906107e0565b6000604051808303816000865af19150503d8060008114610422576040519150601f19603f3d011682016040523d82523d6000602084013e610427565b606091505b5091509150861561047f578161047f5760405162461bcd60e51b815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064016102b5565b60405180604001604052808315158152602001828152508484815181106104a8576104a86107ca565b6020026020010181905250505080806104c0906107fc565b91505061037a565b803573ffffffffffffffffffffffffffffffffffffffff811681146104ec57600080fd5b919050565b60006020828403121561050357600080fd5b61050c826104c8565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561054c5761054c610513565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561057b5761057b610513565b604052919050565b6000806040838503121561059657600080fd5b823580151581146105a657600080fd5b915060208381013567ffffffffffffffff808211156105c457600080fd5b818601915086601f8301126105d857600080fd5b8135818111156105ea576105ea610513565b8060051b6105f9858201610552565b918252838101850191858101908a84111561061357600080fd5b86860192505b838310156106e65782358581111561063057600080fd5b8601601f196040828e038201121561064757600080fd5b61064f610529565b61065a8a84016104c8565b815260408301358881111561066e57600080fd5b8084019350508d603f84011261068357600080fd5b898301358881111561069757610697610513565b6106a78b84601f84011601610552565b92508083528e60408286010111156106be57600080fd5b80604085018c85013760009083018b0152808a01919091528352509186019190860190610619565b809750505050505050509250929050565b60005b838110156107125781810151838201526020016106fa565b50506000910152565b6000604080830185845260208281860152818651808452606093508387019150838160051b88010183890160005b838110156107a157898303605f1901855281518051151584528601518684018990528051898501819052610782818a8701848b016106f7565b95870195601f01601f1916939093018701925090850190600101610749565b50909a9950505050505050505050565b6000602082840312156107c357600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b600082516107f28184602087016106f7565b9190910192915050565b60006001820161081c57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d310911bcb5db51030fbd50d9dc0f22eb8ae8a9017208d07b1999fa3e7277b4564736f6c63430008100033";

export class Multicall__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
